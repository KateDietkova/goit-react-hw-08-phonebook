{"version":3,"file":"static/js/463.49a6772e.chunk.js","mappings":"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","sources":["components/ContactItem/ContactItem.styled.js","components/Modal/Modal.js","components/ContactFormEdit/ContactFormEdit.styled.js","redux/contacts/contacts-selectors.js","components/ContactFormEdit/ContactFormEdit.js","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/Loader/Loader.jsx","pages/Contacts/Contacts.styled.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\n\nexport const ContactInfo = styled.p`\n    margin: 0;\n`\n\nexport const ButtonContactStyled = styled.button`\n  display: inline-block;\n  padding: 10px 20px;\n  border: none;\n  text-align: center;\n  cursor: pointer;\n  background-color: #07bad2;\n  border-radius: 5px;\n\n  :hover {\n    background-color: #1371d6;\n  }\n`;\n\nexport const ButtonEditStyled = styled.button`\n  display: inline-block;\n  padding: 10px 20px;\n  border: none;\n  text-align: center;\n  cursor: pointer;\n  background-color: #07bad2;\n  border-radius: 5px;\n  margin-right: 8px;\n\n  :hover {\n    background-color: #1371d6;\n  }\n`;","import Modal from 'react-bootstrap/Modal';\n\n\nexport const ModalContact = ({title, component: Component, onClose, id}) => {\n  return (\n    <>\n      <Modal.Header closeButton>\n        <Modal.Title>{title}</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Component onClose={onClose} id={id} />\n      </Modal.Body>\n    </>\n  );\n};\n","import styled from 'styled-components';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\nexport const FormStyled = styled(Form)`\n  margin: 0 auto;\n  padding: 10px;\n  font-weight: 500;\n`;\n\nexport const ButtonEdit = styled(Button)`\n  display: block;\n  width: 120px;\n  padding: 8px;\n  margin: 0 auto;\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts;\nexport const selectFilterValue = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilterValue],\n  ({ items }, filterValue) => {\n    const normalizedFilter = filterValue.toLowerCase();\n    const filterContacts = items.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter)\n    );\n    return filterContacts;\n  }\n);\n\n","\nimport { FormStyled, ButtonEdit } from './ContactFormEdit.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateContact } from 'redux/contacts/contacts-operations';\nimport { selectContacts } from 'redux/contacts/contacts-selectors';\nimport { useState } from 'react';\nimport { toast } from 'react-toastify';\n\nimport Form from 'react-bootstrap/Form';\nimport FloatingLabel from 'react-bootstrap/FloatingLabel';\n\nexport const ContactFormEdit = ({ onClose, id }) => {\n  const { items } = useSelector(selectContacts);\n  const [validated, setValidated] = useState(false);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'name':\n        return setName(value);\n      case 'number':\n        return setNumber(value);\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    let isName = false;\n\n    if (name === '' || number === '') {\n      toast.error('Please, fill in all fields');\n      return;\n    }\n\n    if (form.checkValidity() === false) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n    setValidated(true);\n    if (items && items.length > 0) {\n      items.forEach(({ name: existedName }) => {\n        if (name.toLowerCase() === existedName.toLowerCase()) {\n          toast.error(`${name} is already in contacts`);\n          isName = true;\n        }\n      });\n    }\n\n    if (!isName) {\n      dispatch(updateContact({ id, name, number }));\n      onClose();\n      setName('');\n      setNumber('');\n      setValidated(false);\n    }\n  };\n\n  return (\n    <FormStyled noValidate onSubmit={handleSubmit} validated={validated}>\n      <Form.Group className=\"mb-3\" controlId=\"formGroupName\">\n        <FloatingLabel controlId=\"floatingName\" label=\"Name\" className=\"mb-3\">\n          <Form.Control\n            required\n            type=\"text\"\n            placeholder=\"Enter your name\"\n            onChange={handleChange}\n            name=\"name\"\n            value={name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          />\n        </FloatingLabel>\n      </Form.Group>\n      <Form.Group className=\"mb-3\" controlId=\"formGroupNumber\">\n        <FloatingLabel\n          controlId=\"floatingInput\"\n          label=\"Number\"\n          className=\"mb-3\"\n        >\n          <Form.Control\n            required\n            type=\"tel\"\n            placeholder=\"Enter number\"\n            onChange={handleChange}\n            name=\"number\"\n            value={number}\n          />\n        </FloatingLabel>\n      </Form.Group>\n      <ButtonEdit type=\"submit\">Save changes</ButtonEdit>\n    </FormStyled>\n  );\n};\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport { deleteContact } from 'redux/contacts/contacts-operations';\nimport {\n  ButtonContactStyled,\n  ContactInfo,\n  ButtonEditStyled,\n} from './ContactItem.styled';\nimport { ModalContact } from 'components/Modal/Modal';\nimport Modal from 'react-bootstrap/Modal';\nimport { ContactFormEdit } from 'components/ContactFormEdit/ContactFormEdit';\n\n\nexport const ContactItem = ({ contact: { id, name, number } }) => {\n  const dispatch = useDispatch();\n\n   const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n\n  return (\n    <>\n      <ContactInfo>\n        {name}: {number}\n      </ContactInfo>\n      <ButtonEditStyled type=\"button\" onClick={() => handleShow()}>\n        Edit\n      </ButtonEditStyled>\n      <ButtonContactStyled\n        type=\"button\"\n        onClick={() => dispatch(deleteContact(id))}\n      >\n        Delete\n      </ButtonContactStyled>\n      {show && (\n        <Modal show={show} onHide={handleClose}>\n          <ModalContact\n            title={'Edit contact'}\n            component={ContactFormEdit}\n            onClose={handleClose}\n            id={id}\n          />\n        </Modal>\n      )}\n    </>\n  );\n};\n\nContactItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n","import styled from 'styled-components';\n\nexport const ContactListStyled = styled.ul`\n  padding: 0;\n  list-style: none;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  align-items: center;\n`;\n\nexport const ContactListItemStyled = styled.li`\n  border: 1px solid;\n  border-radius: 4px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 10px 15px;\n  width: 300px;\n`;\n","import { ContactItem } from 'components/ContactItem/ContactItem';\nimport { useSelector } from 'react-redux';\nimport { ContactListStyled, ContactListItemStyled } from './ContactList.styled';\nimport { selectVisibleContacts } from 'redux/contacts/contacts-selectors';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n\n  return (\n    <ContactListStyled>\n      {contacts.map(contact => (\n        <ContactListItemStyled key={contact.id}>\n          <ContactItem contact={contact} />\n        </ContactListItemStyled>\n      ))}\n    </ContactListStyled>\n  );\n};\n\n//\n","import styled from 'styled-components';\n\nexport const FilterStyled = styled.input`\n  outline: none;\n  padding: 8px;\n  border-radius: 5px;\n  width: 200px;\n`;\n\nexport const LabelFilter = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  align-items: center;\n  margin-bottom: 15px;\n`;","import { useSelector, useDispatch } from 'react-redux';\nimport { filterContacts } from 'redux/contacts/itemsSlice/filterSlice.js';\nimport { selectFilterValue } from 'redux/contacts/contacts-selectors.js';\nimport { FilterStyled, LabelFilter } from './Filter.styled.js';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filterValue = useSelector(selectFilterValue);\n  return (\n    <>\n      <LabelFilter>\n        Find contacts by name\n        <FilterStyled\n          type=\"text\"\n          value={filterValue}\n          onChange={e => dispatch(filterContacts(e.currentTarget.value))}\n        />\n      </LabelFilter>\n    </>\n  );\n};\n","import { BallTriangle } from 'react-loader-spinner';\nimport { Box } from 'components/Box/Box';\n\nexport const Loader = () => {\n  return (\n    <Box display=\"flex\" justifyContent=\"center\">\n      <BallTriangle\n        height={100}\n        width={100}\n        radius={5}\n        color=\"#07bad2\"\n        ariaLabel=\"ball-triangle-loading\"\n        visible={true}\n      />\n    </Box>\n  );\n};\n","import styled from 'styled-components';\n// import Button from 'react-bootstrap/Button';\n\nexport const SectionContacts = styled.section`\n  padding: 30px 0;\n`;\n\nexport const ButtonWTitleWrapper = styled.div`\n    display: flex;\n    justify-content: space-between;\n`\n","import styled from 'styled-components';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\nexport const FormStyled = styled(Form)`\n  margin: 0 auto;\n  padding: 10px;\n  font-weight: 500;\n`;\n\n\nexport const ButtonAdd = styled(Button)`\n  display: block;\n  width: 120px;\n  padding: 8px;\n  margin: 0 auto;\n`;\n","import { FormStyled, ButtonAdd } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/contacts-operations';\nimport { selectContacts } from 'redux/contacts/contacts-selectors';\nimport { useState } from 'react';\nimport { toast } from 'react-toastify';\n\nimport Form from 'react-bootstrap/Form';\nimport FloatingLabel from 'react-bootstrap/FloatingLabel';\n\nexport const ContactForm = ({ onClose }) => {\n  const { items } = useSelector(selectContacts);\n  const [validated, setValidated] = useState(false);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'name':\n        return setName(value);\n      case 'number':\n        return setNumber(value);\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    let isName = false;\n\n    if (name === '' || number === '') {\n      toast.error('Please, fill in all fields');\n      return;\n    }\n\n    if (form.checkValidity() === false) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n    setValidated(true);\n    if (items && items.length > 0) {\n      items.forEach(({ name: existedName }) => {\n        if (name.toLowerCase() === existedName.toLowerCase()) {\n          toast.error(`${name} is already in contacts`);\n          isName = true;\n        }\n      });\n    }\n\n    if (!isName) {\n      dispatch(addContact({ name, number }));\n      onClose();\n      setName('');\n      setNumber('');\n      setValidated(false);\n    }\n  };\n\n  return (\n    <FormStyled noValidate onSubmit={handleSubmit} validated={validated}>\n      <Form.Group className=\"mb-3\" controlId=\"formGroupName\">\n        <FloatingLabel controlId=\"floatingName\" label=\"Name\" className=\"mb-3\">\n          <Form.Control\n            required\n            type=\"text\"\n            placeholder=\"Enter your name\"\n            onChange={handleChange}\n            name=\"name\"\n            value={name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          />\n        </FloatingLabel>\n      </Form.Group>\n      <Form.Group className=\"mb-3\" controlId=\"formGroupNumber\">\n        <FloatingLabel\n          controlId=\"floatingInput\"\n          label=\"Number\"\n          className=\"mb-3\"\n        >\n          <Form.Control\n            required\n            type=\"tel\"\n            placeholder=\"Enter number\"\n            onChange={handleChange}\n            name=\"number\"\n            value={number}\n          />\n        </FloatingLabel>\n      </Form.Group>\n      <ButtonAdd type=\"submit\">Add contact</ButtonAdd>\n    </FormStyled>\n  );\n};\n","import { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Loader } from 'components/Loader/Loader';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/contacts-operations';\nimport { selectContacts } from 'redux/contacts/contacts-selectors';\nimport { useEffect, useState } from 'react';\nimport { SectionContacts, ButtonWTitleWrapper } from './Contacts.styled';\nimport { IoMdPersonAdd } from 'react-icons/io';\nimport { Button } from 'react-bootstrap';\nimport { ModalContact } from 'components/Modal/Modal';\nimport Modal from 'react-bootstrap/Modal';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\n\nconst Contacts = () => {\n  const { items, isLoading, error } = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n\n\n  return (\n    <SectionContacts>\n      <ButtonWTitleWrapper>\n        <h2>Contacts</h2>\n        <Button type=\"button\" onClick={handleShow}>\n          <IoMdPersonAdd size=\"32\" />\n        </Button>\n      </ButtonWTitleWrapper>\n      <Filter />\n      {isLoading && <Loader />}\n      {error && <div>Sorry, something went wrong :( Please try again</div>}\n      {items.length > 0 ? (\n        <ContactList />\n      ) : (\n        <div>You haven't any contacts yet</div>\n      )}\n      {show && (\n        <Modal show={show} onHide={handleClose}>\n          <ModalContact\n            title={'Add contact'}\n            component={ContactForm}\n            onClose={handleClose}\n          />\n        </Modal>\n      )}\n    </SectionContacts>\n  );\n};\n\nexport default Contacts;\n"],"names":["ContactInfo","styled","ButtonContactStyled","ButtonEditStyled","ModalContact","title","Component","component","onClose","id","Modal","closeButton","FormStyled","Form","ButtonEdit","Button","selectContacts","state","contacts","selectFilterValue","filter","selectVisibleContacts","createSelector","filterValue","items","normalizedFilter","toLowerCase","name","includes","ContactFormEdit","useSelector","useState","validated","setValidated","setName","number","setNumber","dispatch","useDispatch","handleChange","target","value","noValidate","onSubmit","e","preventDefault","form","currentTarget","isName","checkValidity","stopPropagation","length","forEach","existedName","toast","updateContact","className","controlId","FloatingLabel","label","required","type","placeholder","onChange","pattern","ContactItem","contact","show","setShow","handleClose","onClick","deleteContact","onHide","ContactListStyled","ContactListItemStyled","ContactList","map","FilterStyled","LabelFilter","Filter","filterContacts","Loader","Box","display","justifyContent","height","width","radius","color","ariaLabel","visible","SectionContacts","ButtonWTitleWrapper","ButtonAdd","ContactForm","addContact","isLoading","error","useEffect","fetchContacts","size"],"sourceRoot":""}