{"version":3,"file":"static/js/506.19176e92.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.styled.js","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/Loader/Loader.jsx","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form, Field } from 'formik';\n\nexport const FormStyled = styled(Form)`\n  padding: 20px;\n  border: 1px solid;\n  width: 300px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  border-radius: 4px;\n  background-color: #eaf2f2;\n`;\n\nexport const FieldStyled = styled(Field)`\n  outline: none;\n  padding: 8px;\n  border-radius: 5px;\n  :focus:valid {\n    border-color: #1eeb25;\n  }\n\n  :focus:invalid {\n    border-color: #eb1e1e;\n  }\n`;\n\nexport const LabelStyled = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n\nexport const ButtonStyled = styled.button`\n  display: inline-flex;\n  width: 100px;\n  padding: 10px 12px;\n  border: none;\n  margin: 0 auto;\n  text-align: center;\n  cursor: pointer;\n  background-color: #07bad2;\n  border-radius: 5px;\n\n  :hover {\n    background-color: #1371d6;\n  }\n`;\n\n\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts;\nexport const selectFilterValue = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilterValue],\n  ({ items }, filterValue) => {\n    const normalizedFilter = filterValue.toLowerCase();\n    const filterContacts = items.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter)\n    );\n    return filterContacts;\n  }\n);\n\n","import { Formik } from 'formik';\nimport * as yup from 'yup';\nimport {\n  FormStyled,\n  FieldStyled,\n  LabelStyled,\n  ButtonStyled,\n} from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/contacts-operations';\nimport { selectContacts } from 'redux/contacts/contacts-selectors';\n\nconst initialValue = {\n  name: '',\n  number: '',\n};\n\nlet schema = yup.object().shape({\n  name: yup\n    .string()\n    .required('Name may contain only letters, apostrophe, dash and spaces.'),\n  phone: yup\n    .number()\n    .required(\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .positive()\n    .integer(),\n});\n\nexport const ContactForm = () => {\n  const { items } = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  const handleSubmit = (value, { resetForm }) => {\n    let isName = false;\n    if (items && items.length > 0) {\n      items.forEach(({ name }) => {\n        if (value.name.toLowerCase() === name.toLowerCase()) {\n          alert(`${value.name} is already in contacts`);\n          isName = true;\n        }\n      });\n    }\n\n    if (!isName) {\n      dispatch(addContact(value));\n      resetForm();\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={initialValue}\n      validationScheme={schema}\n      onSubmit={handleSubmit}\n    >\n      <FormStyled>\n        <LabelStyled htmlFor=\"name\">\n          Name\n          <FieldStyled\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </LabelStyled>\n        <LabelStyled htmlFor=\"number\">\n          Number\n          <FieldStyled\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </LabelStyled>\n        <ButtonStyled type=\"submit\">Add contact</ButtonStyled>\n      </FormStyled>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\n\nexport const ContactInfo = styled.p`\n    margin: 0;\n`\n\nexport const ButtonContactStyled = styled.button`\n  display: inline-block;\n  padding: 10px 20px;\n  border: none;\n  text-align: center;\n  cursor: pointer;\n  background-color: #07bad2;\n  border-radius: 5px;\n\n  :hover {\n    background-color: #1371d6;\n  }\n`;","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contacts-operations';\nimport { ButtonContactStyled, ContactInfo } from './ContactItem.styled';\n\nexport const ContactItem = ({ contact: { id, name, number } }) => {\n  const dispatch = useDispatch();\n  return (\n    <>\n      <ContactInfo>\n        {name}: {number}\n      </ContactInfo>\n      <ButtonContactStyled\n        type=\"button\"\n        onClick={() => dispatch(deleteContact(id))}\n      >\n        Delete\n      </ButtonContactStyled>\n    </>\n  );\n};\n\nContactItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n","import styled from 'styled-components';\n\nexport const ContactListStyled = styled.ul`\n  padding: 0;\n  list-style: none;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  align-items: center;\n`;\n\nexport const ContactListItemStyled = styled.li`\n  border: 1px solid;\n  border-radius: 4px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 10px 15px;\n  width: 300px;\n`;\n","import { ContactItem } from 'components/ContactItem/ContactItem';\nimport { useSelector } from 'react-redux';\nimport { ContactListStyled, ContactListItemStyled } from './ContactList.styled';\nimport { selectVisibleContacts } from 'redux/contacts/contacts-selectors';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n\n  return (\n    <ContactListStyled>\n      {contacts.map(contact => (\n        <ContactListItemStyled key={contact.id}>\n          <ContactItem contact={contact} />\n        </ContactListItemStyled>\n      ))}\n    </ContactListStyled>\n  );\n};\n\n//\n","import styled from 'styled-components';\n\nexport const FilterStyled = styled.input`\n  outline: none;\n  padding: 8px;\n  border-radius: 5px;\n  width: 200px;\n`;\n\nexport const LabelFilter = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  align-items: center;\n  margin-bottom: 15px;\n`;","import { useSelector, useDispatch } from 'react-redux';\nimport { filterContacts } from 'redux/contacts/itemsSlice/filterSlice.js';\nimport { selectFilterValue } from 'redux/contacts/contacts-selectors.js';\nimport { FilterStyled, LabelFilter } from './Filter.styled.js';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filterValue = useSelector(selectFilterValue);\n  return (\n    <>\n      <LabelFilter>\n        Find contacts by name\n        <FilterStyled\n          type=\"text\"\n          value={filterValue}\n          onChange={e => dispatch(filterContacts(e.currentTarget.value))}\n        />\n      </LabelFilter>\n    </>\n  );\n};\n","import { BallTriangle } from 'react-loader-spinner';\nimport { Box } from 'components/Box/Box';\n\nexport const Loader = () => {\n  return (\n    <Box display=\"flex\" justifyContent=\"center\">\n      <BallTriangle\n        height={100}\n        width={100}\n        radius={5}\n        color=\"#07bad2\"\n        ariaLabel=\"ball-triangle-loading\"\n        visible={true}\n      />\n    </Box>\n  );\n};\n","import styled from 'styled-components';\n\nexport const SectionContacts = styled.section`\n  padding: 30px 0;\n`;\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Loader } from 'components/Loader/Loader';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/contacts-operations';\nimport { selectContacts } from 'redux/contacts/contacts-selectors';\nimport { useEffect } from 'react';\nimport { SectionContacts } from './Contacts.styled';\n\nconst Contacts = () => {\n  const { items, isLoading, error } = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <SectionContacts>\n      <h2>Contacts</h2>\n      <ContactForm />\n      <Filter />\n      {isLoading && <Loader />}\n      {error && <div>Sorry, something went wrong :( Please try again</div>}\n      {items.length > 0 ? (\n        <ContactList />\n      ) : (\n        <div>You haven't any contacts yet</div>\n      )}\n    </SectionContacts>\n  );\n};\n\nexport default Contacts;\n"],"names":["FormStyled","styled","Form","FieldStyled","Field","LabelStyled","ButtonStyled","selectContacts","state","contacts","selectFilterValue","filter","selectVisibleContacts","createSelector","filterValue","items","normalizedFilter","toLowerCase","name","includes","initialValue","number","schema","yup","shape","required","phone","positive","integer","ContactForm","useSelector","dispatch","useDispatch","initialValues","validationScheme","onSubmit","value","resetForm","isName","length","forEach","alert","addContact","htmlFor","type","pattern","title","ContactInfo","ButtonContactStyled","ContactItem","contact","id","onClick","deleteContact","ContactListStyled","ContactListItemStyled","ContactList","map","FilterStyled","LabelFilter","Filter","onChange","e","filterContacts","currentTarget","Loader","Box","display","justifyContent","height","width","radius","color","ariaLabel","visible","SectionContacts","isLoading","error","useEffect","fetchContacts"],"sourceRoot":""}